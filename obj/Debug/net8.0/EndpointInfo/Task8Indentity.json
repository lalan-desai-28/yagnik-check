{
  "openapi": "3.0.1",
  "info": {
    "title": "Task8Indentity",
    "version": "v1"
  },
  "paths": {
    "/api/admin": {
      "get": {
        "tags": [
          "AdminContoller"
        ],
        "summary": "This endpoint is accessible only by users with the \"Admin\" role.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user in the system.",
        "requestBody": {
          "description": "The user registration model containing username, email, password, and role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login an existing user and generate a JWT token and refresh token.",
        "requestBody": {
          "description": "The login model containing username and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh the JWT token using a valid refresh token.",
        "requestBody": {
          "description": "The token refresh request containing the expired access token and refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/auth/revoke": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Revoke the refresh token for the current user.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get all categories in the catalog.",
        "responses": {
          "200": {
            "description": "Returns the list of categories."
          },
          "400": {
            "description": "Bad request if any issue occurs."
          }
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create a new category in the catalog.",
        "requestBody": {
          "description": "The category data to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Returns the created category."
          },
          "400": {
            "description": "If the category already exists by name."
          },
          "403": {
            "description": "Forbidden if the user doesn't have the right role (Admin, Manager)."
          }
        }
      }
    },
    "/api/Category/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get a specific category by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the category.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category details."
          },
          "404": {
            "description": "Category not found if no category matches the ID."
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update an existing category in the catalog.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the category to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated category data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Category updated successfully."
          },
          "404": {
            "description": "Category not found if no category matches the ID."
          },
          "403": {
            "description": "Forbidden if the user doesn't have the right role (Admin, Manager)."
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete a category from the catalog.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the category to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Category deleted successfully."
          },
          "404": {
            "description": "Category not found if no category matches the ID."
          },
          "403": {
            "description": "Forbidden if the user doesn't have the right role (Admin, Manager)."
          }
        }
      }
    },
    "/api/Product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all products from the catalog.",
        "responses": {
          "200": {
            "description": "Returns the list of products."
          },
          "400": {
            "description": "Bad request if any issue occurs."
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new product in the catalog.",
        "requestBody": {
          "description": "The product data to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Returns the created product."
          },
          "400": {
            "description": "If the Category ID is invalid."
          },
          "403": {
            "description": "Forbidden if the user doesn't have the right role (Admin, Manager)."
          }
        }
      }
    },
    "/api/Product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get a specific product by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the product details."
          },
          "404": {
            "description": "Product not found if no product matches the ID."
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing product in the catalog.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the product to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated product data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Product updated successfully."
          },
          "400": {
            "description": "If the Category ID is invalid or the product details are incorrect."
          },
          "404": {
            "description": "Product not found if no product matches the ID."
          },
          "403": {
            "description": "Forbidden if the user doesn't have the right role (Admin, Manager)."
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product from the catalog.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the product to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Product deleted successfully."
          },
          "404": {
            "description": "Product not found if no product matches the ID."
          },
          "403": {
            "description": "Forbidden if the user doesn't have the right role (Admin, Manager)."
          }
        }
      }
    },
    "/api/Product/category/{categoryId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all products in a specific category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "The unique identifier of the category.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of products in the category."
          },
          "404": {
            "description": "If the category does not exist or no products are found for that category."
          }
        }
      }
    },
    "/api/user/user-or-admin": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "This endpoint is accessible by users with either the \"Admin\" or \"User\" role.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/user/all-users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all registered users (accessible by Admin only).",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "categoryId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "stockQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterModel": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TokenRefreshRequest": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}